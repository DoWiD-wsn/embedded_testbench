#!/usr/bin/env python3

########################################################################
#   Experiment Setup Module                                            #
#                                                                      #
#   Author: Dominik Widhalm                                            #
#   Date:   2020-10-29                                                 #
#                                                                      #
#   Usage:                                                             #
#       setup = ExpSetup()                                             #
#       setup.begin()                                                  #
#       ...                                                            #
#       setup.mcu_enable()                                             #
#       setup.mcu_set_voltage(VALUE)                                   #
#       if setup.mcu_is_power_good():                                  #
#       v_mcu = setup.mcu_get_voltage()                                #
#       i_mcu = setup.mcu_get_current()                                #
#                                                                      #
########################################################################


##### LIBRARIES ########################
# time functionality
from time import sleep
### MODULES
# Sensors
from _common_.INA219 import INA219      # INA
from _common_.DS18B20 import DS18B20    # OWI
from _common_.JT103 import JT103        # TWI
# Actuators
from _common_.TCA9548A import TCA9548A  # MUX
from _common_.MIC24045 import MIC24045  # MIC
# Misc
from _common_.I2Chelper import i2c_is_available


##### MACROS ###########################
# MIC Enable Lines
MIC1_EN         = 5     # V_MCU
MIC2_EN         = 6     # V_RADIO
MIC3_EN         = 13    # V_SENSE
# DS18B20 Path
DS18B20_PATH    = '/sys/bus/w1/devices/28-011927fdb603/w1_slave'


##### ExpSetup CLASS ################
class ExpSetup(object):
    ### PROPERTIES ###
    # Multiplexer channels
    _MUX_CH_NONE    = 0
    _MUX_CH_MCU     = 1
    _MUX_CH_RADIO   = 2
    _MUX_CH_SENSOR  = 3
    # Common I2C addresses
    _I2C_ADD_MUX    = 0x70
    _I2C_ADD_MIC    = 0x50
    _I2C_ADD_INA    = 0x40
    _I2C_ADD_JT103  = 0x48
    # ADC specific
    _JT103_CH       = 0
    
    # Constructor
    def __init__(self, busnum=1):
        self.__bus = busnum
        self.__mux = None
        self.mic1 = None
        self.ina1 = None
        self.mic2 = None
        self.ina2 = None
        self.mic3 = None
        self.ina3 = None
        self.surface = None
        self.ambient = None
    
    # Initialize the test setup (check for devices)
    def begin(self):
        # Check if MUX exists
        if i2c_is_available(address=self._I2C_ADD_MUX, busnum=self.__bus):
            # Create a multiplexer instance
            self.__mux = TCA9548A(address=self._I2C_ADD_MUX, busnum=self.__bus)
        else:
            return False
        # Check if JT103 exists
        if i2c_is_available(address=self._I2C_ADD_JT103, busnum=self.__bus):
            # Create a surface temperate sensor instance
            self.surface = JT103(address=self._I2C_ADD_JT103, channel=self._JT103_CH, busnum=self.__bus)
        else:
            return False
        # Create an ambient temperate sensor instance
        self.ambient = DS18B20(DS18B20_PATH)
        
        ### Next check if MIC and INA exist on all three channels ###
        # Select MCU channel
        if not self.__mux.select(self._MUX_CH_MCU):
            return False
        # Check if MIC exists on that channel
        if i2c_is_available(address=self._I2C_ADD_MIC, busnum=self.__bus):
            # Create a MIC instance
            self.mic1 = MIC24045(gpio=MIC1_EN, address=self._I2C_ADD_MIC, busnum=self.__bus)
            # Initially disable MIC
            self.mic1.disable()
            # Initially set lowest voltage
            self.mic1.set_output_voltage(0)
        else:
            return False
        # Check if INA exists on that channel
        if i2c_is_available(address=self._I2C_ADD_INA, busnum=self.__bus):
            # Create a INA instance
            self.ina1 = INA219(address=self._I2C_ADD_INA, busnum=self.__bus)
            # Configure the INA
            self.ina1.begin_16V_400mA()
        else:
            return False
        
        # Select RADIO channel
        if not self.__mux.select(self._MUX_CH_RADIO):
            return False
        # Check if MIC exists on that channel
        if i2c_is_available(address=self._I2C_ADD_MIC, busnum=self.__bus):
            # Create a MIC instance
            self.mic2 = MIC24045(gpio=MIC2_EN, address=self._I2C_ADD_MIC, busnum=self.__bus)
            # Initially disable MIC
            self.mic2.disable()
            # Initially set lowest voltage
            self.mic2.set_output_voltage(0)
        else:
            return False
        # Check if INA exists on that channel
        if i2c_is_available(address=self._I2C_ADD_INA, busnum=self.__bus):
            # Create a INA instance
            self.ina2 = INA219(address=self._I2C_ADD_INA, busnum=self.__bus)
            # Configure the INA
            self.ina2.begin_16V_400mA()
        else:
            return False
        
        # Select SENSOR channel
        if not self.__mux.select(self._MUX_CH_SENSOR):
            return False
        # Check if MIC exists on that channel
        if i2c_is_available(address=self._I2C_ADD_MIC, busnum=self.__bus):
            # Create a MIC instance
            self.mic3 = MIC24045(gpio=MIC3_EN, address=self._I2C_ADD_MIC, busnum=self.__bus)
            # Initially disable MIC
            self.mic3.disable()
            # Initially set lowest voltage
            self.mic3.set_output_voltage(0)
        else:
            return False
        # Check if INA exists on that channel
        if i2c_is_available(address=self._I2C_ADD_INA, busnum=self.__bus):
            # Create a INA instance
            self.ina3 = INA219(address=self._I2C_ADD_INA, busnum=self.__bus)
            # Configure the INA
            self.ina3.begin_16V_400mA()
        else:
            return False
        
        # Initially de-select all channels
        self.__mux.select(self._MUX_CH_NONE)
        # Everything done
        return True
    
    
    
    ##### MCU CHANNEL ###################
    # Enable the MCU MIC
    def mcu_enable(self):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Enable the MIC
        self.mic1.enable()
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Disable the MCU MIC
    def mcu_disable(self):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Enable the MIC
        self.mic1.disable()
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Check if MCU MIC power is good
    def mcu_is_power_good(self):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Get the power good flag
        pg = self.mic1.is_power_good()
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return flag
        return pg
    
    # Wait for MCU MIC power good
    def mcu_wait_power_good(self, timeout=1000):
        # Wait while the PG flag is low
        passed = 0
        while not self.mcu_is_power_good():
            # check if timeout has already been reached
            if passed >= timeout:
                # Timeout
                return False
            # wait for 10ms
            sleep(0.01)
            # increment timeout counter
            passed = passed + 10
        # Everything ok
        return True
    
    # Set the MCU voltage
    def mcu_set_voltage(self, value):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Set the output voltage
        self.mic1.set_output_voltage(value)
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Read the MCU voltage
    def mcu_get_voltage(self):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Read the voltage
        volts = self.ina1.get_bus_voltage_V()
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the voltage
        return volts
    
    # Read the MCU current
    def mcu_get_current(self):
        # Select MCU channel
        self.__mux.select(self._MUX_CH_MCU)
        # Read the current
        amps = self.ina1.get_current_mA()
        # De-select MCU channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the current
        return amps
    
    
    
    ##### RADIO CHANNEL ################
    # Enable the RADIO MIC
    def radio_enable(self):
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Enable the MIC
        self.mic2.enable()
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Disable the RADIO MIC
    def radio_disable(self):
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Enable the MIC
        self.mic2.disable()
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Check if RADIO MIC power is good
    def radio_is_power_good(self):
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Get the power good flag
        pg = self.mic2.is_power_good()
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return flag
        return pg
    
    # Wait for RADIO MIC power good
    def radio_wait_power_good(self, timeout=1000):
        # Wait while the PG flag is low
        passed = 0
        while not self.radio_is_power_good():
            # check if timeout has already been reached
            if passed >= timeout:
                # Timeout
                return False
            # wait for 10ms
            sleep(0.01)
            # increment timeout counter
            passed = passed + 10
        # Everything ok
        return True
    
    # Set the RADIO voltage
    def radio_set_voltage(self, value):
        # Check if value is greater than 244 -> 3.4V
        if value>244:
            value=244
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Set the output voltage
        self.mic2.set_output_voltage(value)
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Read the RADIO voltage
    def radio_get_voltage(self):
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Read the voltage
        volts = self.ina2.get_bus_voltage_V()
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the voltage
        return volts
    
    # Read the RADIO current
    def radio_get_current(self):
        # Select RADIO channel
        self.__mux.select(self._MUX_CH_RADIO)
        # Read the current
        amps = self.ina2.get_current_mA()
        # De-select RADIO channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the current
        return amps
    
    
    
    ##### SENSOR CHANNEL ################
    # Enable the SENSOR MIC
    def sensor_enable(self):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Enable the MIC
        self.mic3.enable()
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Disable the SENSOR MIC
    def sensor_disable(self):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Enable the MIC
        self.mic3.disable()
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Check if SENSOR MIC power is good
    def sensor_is_power_good(self):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Get the power good flag
        pg = self.mic3.is_power_good()
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return flag
        return pg
    
    # Wait for SENSOR MIC power good
    def sensor_wait_power_good(self, timeout=1000):
        # Wait while the PG flag is low
        passed = 0
        while not self.sensor_is_power_good():
            # check if timeout has already been reached
            if passed >= timeout:
                # Timeout
                return False
            # wait for 10ms
            sleep(0.01)
            # increment timeout counter
            passed = passed + 10
        # Everything ok
        return True
    
    # Set the SENSOR voltage
    def sensor_set_voltage(self, value):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Set the output voltage
        self.mic3.set_output_voltage(value)
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
    
    # Read the SENSOR voltage
    def sensor_get_voltage(self):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Read the voltage
        volts = self.ina3.get_bus_voltage_V()
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the voltage
        return volts
    
    # Read the SENSOR current
    def sensor_get_current(self):
        # Select SENSOR channel
        self.__mux.select(self._MUX_CH_SENSOR)
        # Read the current
        amps = self.ina3.get_current_mA()
        # De-select SENSOR channel
        self.__mux.select(self._MUX_CH_NONE)
        # Return the current
        return amps
    
    
    
    ##### ALL CHANNEL ########
    # Enable the ALL MIC
    def all_enable(self):
        # Enable MCU
        self.mcu_enable()
        # Enable RADIO
        self.radio_enable()
        # Enable SENSOR
        self.sensor_enable()
    
    # Disable the ALL MIC
    def all_disable(self):
        # Enable MCU
        self.mcu_disable()
        # Enable RADIO
        self.radio_disable()
        # Enable SENSOR
        self.sensor_disable()
    
    # Check if ALL MIC power is good
    def all_is_power_good(self):
        # Check if MCU power is good
        if not self.mcu_is_power_good():
            return False
        # Check if RADIO power is good
        if not self.radio_is_power_good():
            return False
        # Check if SENSOR power is good
        if not self.sensor_is_power_good():
            return False
        # All power is good
        return True
    
    # Wait for ALL MIC power good
    def all_wait_power_good(self, timeout=1000):
        # Wait while the PG flag is low
        passed = 0
        while not self.all_is_power_good():
            # check if timeout has already been reached
            if passed >= timeout:
                # Timeout
                return False
            # wait for 10ms
            sleep(0.01)
            # increment timeout counter
            passed = passed + 10
        # Everything ok
        return True
    
    # Set the ALL voltages
    def all_set_voltage(self, mcu, radio, sensor):
        # Set MCU voltage
        self.mcu_set_voltage(mcu)
        # Set RADIO voltage
        self.radio_set_voltage(radio)
        # Set SENSOR voltage
        self.sensor_set_voltage(sensor)
    
    # Set the ALL voltages
    def all_set_voltage_equal(self, register):
        # Set all voltage levels
        self.all_set_voltage(register, register, register)
    
    # Read the ALL voltages
    def all_get_voltage(self):
        # Set MCU voltage
        mcu = self.mcu_get_voltage()
        # Set RADIO voltage
        radio = self.radio_get_voltage()
        # Set SENSOR voltage
        sensor = self.sensor_get_voltage()
        # Return the voltages
        return (mcu, radio, sensor)
    
    # Read the ALL currents
    def all_get_current(self):
        # Set MCU current
        mcu = self.mcu_get_current()
        # Set RADIO current
        radio = self.radio_get_current()
        # Set SENSOR current
        sensor = self.sensor_get_current()
        # Return the currents
        return (mcu, radio, sensor)
    
    
    
    ### TEMPARATUR SENSORS ###
    # Read surface temperature
    def surface_get_temperature(self):
        return self.surface.read_temp()
    
    # Read ambient temperature
    def ambient_get_temperature(self):
        return self.ambient.read_temp()
    
    
    ### FUNCTION WRAPPER ###
    # Get MIC voltage from register
    def get_voltage_from_register(self,reg):
        # Use MIC1 since it doesn't depend on actual hardware
        return self.mic1.get_voltage_from_register(reg)
    
    # Get MIC register from voltage
    def get_register_from_voltage(self,vout):
        # Use MIC1 since it doesn't depend on actual hardware
        return self.mic1.get_register_from_voltage(vout)
